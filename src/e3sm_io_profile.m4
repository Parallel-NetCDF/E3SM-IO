dnl Process this m4 file to produce 'C' language file.
dnl
dnl If you see this line, you can ignore the next one.
/* Do not edit this file. It is produced from the corresponding .m4 source */
dnl
/*
 *  Copyright (C) 2021, Northwestern University and Argonne National Laboratory
 *  See COPYRIGHT notice in top-level directory.
 */
/* $Id$ */
dnl
include(`foreach.m4')`'dnl
include(`foreach_idx.m4')`'dnl
include(`list_len.m4')`'dnl
include(`utils.m4')`'dnl
include(`e3sm_io_profile_timers.m4')`'dnl
define(`upcase', `translit(`$*', `a-z', `A-Z')')`'dnl
define(`CONCATE',`$1$2')`'dnl
changecom(`##', `')`'dnl
dnl
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
/**/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
/**/
#include <unistd.h> /* getopt() */
/**/
#include <mpi.h>
/**/
#include <e3sm_io.h>
#include <e3sm_io_err.h>
#include <e3sm_io_profile.hpp>

/*
 * Report performance profiling
 */

static double tmax[E3SM_IO_NTIMER], tmin[E3SM_IO_NTIMER], tmean[E3SM_IO_NTIMER], tvar[E3SM_IO_NTIMER], tvar_local[E3SM_IO_NTIMER];

double e3sm_io_profile_times[E3SM_IO_NTIMER];
double e3sm_io_profile_start_time[E3SM_IO_NTIMER];
double e3sm_io_profile_counts[E3SM_IO_NTIMER];

const char * const tname[E3SM_IO_NTIMER]={
foreach(`t', E3SM_IO_TIMERS, `"CONCATE(`e3sm_io_timer_', t)",
')dnl
};

int e3sm_io_print_profile(e3sm_io_config *cfg){
    int i;

	MPI_Reduce (e3sm_io_profile_times, tmax, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_MAX, 0, cfg->io_comm);
	MPI_Reduce (e3sm_io_profile_times, tmin, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_MIN, 0, cfg->io_comm);
	MPI_Allreduce (e3sm_io_profile_times, tmean, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_SUM, cfg->io_comm);
	for (i = 0; i < E3SM_IO_NTIMER; i++) {
		tmean[i] /= cfg->np;
		tvar_local[i] = (e3sm_io_profile_times[i] - tmean[i]) * (e3sm_io_profile_times[i] - tmean[i]);
	}
	MPI_Reduce (tvar_local, tvar, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_SUM, 0, cfg->io_comm);

	if (cfg->rank == 0) {
		for (i = 0; i < E3SM_IO_NTIMER; i++) {
			printf ("#%%$: %s_time_mean: %lf\n", tname[i], tmean[i]);
			printf ("#%%$: %s_time_max: %lf\n", tname[i], tmax[i]);
			printf ("#%%$: %s_time_min: %lf\n", tname[i], tmin[i]);
			printf ("#%%$: %s_time_var: %lf\n\n", tname[i], tvar[i]);
		}
	}

	MPI_Reduce (e3sm_io_profile_counts, tmax, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_MAX, 0, cfg->io_comm);
	MPI_Reduce (e3sm_io_profile_counts, tmin, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_MIN, 0, cfg->io_comm);
	MPI_Allreduce (e3sm_io_profile_counts, tmean, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_SUM, cfg->io_comm);
	for (i = 0; i < E3SM_IO_NTIMER; i++) {
		tmean[i] /= cfg->np;
		tvar_local[i] = (e3sm_io_profile_counts[i] - tmean[i]) * (e3sm_io_profile_counts[i] - tmean[i]);
	}
	MPI_Reduce (tvar_local, tvar, E3SM_IO_NTIMER, MPI_DOUBLE, MPI_SUM, 0, cfg->io_comm);

	if (cfg->rank == 0) {
		for (i = 0; i < E3SM_IO_NTIMER; i++) {
			printf ("#%%$: %s_count_mean: %lf\n", tname[i], tmean[i]);
			printf ("#%%$: %s_count_max: %lf\n", tname[i], tmax[i]);
			printf ("#%%$: %s_count_min: %lf\n", tname[i], tmin[i]);
			printf ("#%%$: %s_count_var: %lf\n\n", tname[i], tvar[i]);
		}
	}  

	return 0;        
}



