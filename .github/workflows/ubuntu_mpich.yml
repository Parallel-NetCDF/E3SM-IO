name: Ubuntu

on:
  push:
    branches: master
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.jpg'
      - '**.png'
  pull_request:
    branches: master
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.jpg'
      - '**.png'

jobs:
    build:
      runs-on: ubuntu-latest
      timeout-minutes: 60
      steps:
        - uses: actions/checkout@v2
        - name: Set up dependencies
          run: |
            sudo apt-get update
            sudo apt-get install automake autoconf libtool libtool-bin m4
            # mpi
            sudo apt-get install mpich
            # zlib
            sudo apt-get install zlib1g-dev
        - name: Install PnetCDF
          run: |
            WORKDIR=$(pwd)
            rm -rf pnetcdf-1.12.3.tar.gz pnetcdf-1.12.3
            wget -cq https://parallel-netcdf.github.io/Release/pnetcdf-1.12.3.tar.gz
            tar -zxf pnetcdf-1.12.3.tar.gz
            cd pnetcdf-1.12.3
            ./configure --prefix=${WORKDIR}/.local/pnc/1.12.3 \
                        --disable-fortran \
                        --disable-cxx
            make -j 4 install
        - name: Install HDF5
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            rm -rf hdf5-1.13.0.tar.gz hdf5-1.13.0
            wget -cq https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-1.13.0/src/hdf5-1.13.0.tar.gz
            tar -zxf hdf5-1.13.0.tar.gz
            cd hdf5-1.13.0
            ./configure --prefix=${WORKDIR}/.local/hdf5/1.13.0 \
                        --enable-hl \
                        --enable-parallel \
                        --enable-build-mode=production \
                        --disable-doxygen-doc \
                        --disable-doxygen-man \
                        --disable-doxygen-html \
                        --disable-hltools \
                        --disable-tools \
                        --disable-tests \
                        CC=mpicc
            make -j 4 install
        - name: Install NetCDF-C
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            rm -rf v4.8.1.tar.gz netcdf-c-4.8.1
            wget -cq https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.8.1.tar.gz
            tar -zxf v4.8.1.tar.gz
            cd netcdf-c-4.8.1
            ./configure --prefix=${WORKDIR}/.local/netcdf/4.8.1 \
                        --disable-dap \
                        --disable-nczarr \
                        --disable-nczarr-filters \
                        --disable-filter-testing \
                        CC=mpicc \
                        CPPFLAGS="-I${WORKDIR}/.local/hdf5/1.13.0/include" \
                        LDFLAGS="-L${WORKDIR}/.local/hdf5/1.13.0/lib" \
                        LIBS="-lhdf5"
            make -j 4 install
        - name: Install ADIOS2
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            rm -rf v2.7.1.tar.gz ADIOS2-2.7.1 adios2_build
            wget -cq https://github.com/ornladios/ADIOS2/archive/refs/tags/v2.7.1.tar.gz
            tar -zxf v2.7.1.tar.gz
            mkdir adios2_build
            cd adios2_build
            cmake -DCMAKE_INSTALL_PREFIX=${WORKDIR}/.local/adios2/2.7.1 \
                  -DADIOS2_USE_MPI=ON \
                  -DADIOS2_USE_Fortran=OFF \
                  -DADIOS2_USE_Python=OFF \
                  -DADIOS2_USE_ZeroMQ=OFF \
                  -DADIOS2_USE_HDF5=OFF \
                  -DADIOS2_USE_SST=OFF \
                  -DADIOS2_USE_BZip2=OFF \
                  -DADIOS2_USE_ZFP=OFF \
                  -DADIOS2_USE_SZ=OFF \
                  -DADIOS2_USE_MGARD=OFF \
                  -DADIOS2_USE_PNG=OFF \
                  -DADIOS2_USE_Blosc=OFF \
                  -DADIOS2_BUILD_EXAMPLES=OFF \
                  -DBUILD_TESTING=OFF \
                  ../ADIOS2-2.7.1
            make -j 4
            make -j 4 install
        - name: Install log VOL
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            rm -rf logvol.1.2.0.tar.gz vol-log-based-logvol.1.2.0
            wget -cq https://github.com/DataLib-ECP/vol-log-based/archive/refs/tags/logvol.1.2.0.tar.gz
            tar -zxf logvol.1.2.0.tar.gz
            cd vol-log-based-logvol.1.2.0
            autoreconf -i
            ./configure --prefix=${WORKDIR}/.local/logvol/1.2.0 \
                        --with-hdf5=${WORKDIR}/.local/hdf5/1.13.0
            make -j 4 install
        - name: Build E3SM_IO with PnetCDF only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            autoreconf -i
            ./configure --with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDf + HDF5 only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 \
                        --with-hdf5=${WORKDIR}/.local/hdf5/1.13.0 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDf + HDF5 log-based VOL only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 \
                        --with-hdf5=${WORKDIR}/.local/hdf5/1.13.0 \
                        --with-logvol=${WORKDIR}/.local/logvol/1.2.0 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDf + NetCDF4 only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 \
                        --with-netcdf4=${WORKDIR}/.local/netcdf/4.8.1 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build E3SM_IO with PnetCDF + ADIOS only
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 \
                        --with-adios2=${WORKDIR}/.local/adios2/2.7.1 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
            make check
            cat test.sh.log utils/*.log
            make -s distclean
        - name: Build and test E3SM_IO with all APIs
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            ./configure --with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 \
                        --with-hdf5=${WORKDIR}/.local/hdf5/1.13.0 \
                        --with-netcdf4=${WORKDIR}/.local/netcdf/4.8.1 \
                        --with-logvol=${WORKDIR}/.local/logvol/1.2.0 \
                        --with-adios2=${WORKDIR}/.local/adios2/2.7.1 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 4
        - name: Print log all APIs
          if: ${{ failure() }}
          run: |
            cat config.log
            cat test.sh.log utils/*.log
        - name: Test E3SM_IO all APIs -- parallel runs
          if: ${{ success() }}
          run: |
            make ptest
        - name: Test make distcheck
          if: ${{ success() }}
          run: |
            WORKDIR=$(pwd)
            make distcheck DISTCHECK_CONFIGURE_FLAGS="--with-pnetcdf=${WORKDIR}/.local/pnc/1.12.3 --with-hdf5=${WORKDIR}/.local/hdf5/1.13.0 --with-netcdf4=${WORKDIR}/.local/netcdf/4.8.1 --with-logvol=${WORKDIR}/.local/logvol/1.2.0 --with-adios2=${WORKDIR}/.local/adios2/2.7.1 CC=mpicc CXX=mpicxx CFLAGS=-fno-var-tracking-assignments CXXFLAGS=-fno-var-tracking-assignments"
            make distclean

