name: OpenMPI

on:
  push:
    branches:
      - master
      - github_action
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.jpg'
      - '**/*.png'
      - 'tests/*'
      - 'datasets/*'
  pull_request:
    branches: master
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.jpg'
      - '**/*.png'
      - 'tests/*'
      - 'datasets/*'

env:
   PNETCDF_VERSION: 1.12.3
   HDF5_VERSION_MAJOR: 1.14
   HDF5_VERSION: 1.14.0
   NETCDF4_VERSION: 4.9.0
   ADIOS_VERSION: 2.8.3
   LOG_VOL_VERSION: 1.4.0

jobs:
    build:
      runs-on: ubuntu-latest
      timeout-minutes: 60
      steps:
        - uses: actions/checkout@v3
        - name: Set up dependencies
          run: |
            sudo apt-get update
            sudo apt-get install automake autoconf libtool libtool-bin m4
            # zlib
            sudo apt-get install zlib1g-dev
            # OpenMPI
            sudo apt-get install openmpi-bin openmpi-common libopenmpi-dev libgtk2.0-dev
            echo "---- location of OpenMPI C compiler ----"
            which mpicc
        - name: Install PnetCDF
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install PnetCDF on ${GITHUB_WORKSPACE}/PnetCDF"
            rm -rf PnetCDF
            mkdir PnetCDF
            cd PnetCDF
            wget -cq https://parallel-netcdf.github.io/Release/pnetcdf-${PNETCDF_VERSION}.tar.gz
            tar -zxf pnetcdf-${PNETCDF_VERSION}.tar.gz
            cd pnetcdf-${PNETCDF_VERSION}
            ./configure --prefix=${GITHUB_WORKSPACE}/PnetCDF \
                        --silent \
                        --disable-fortran \
                        --disable-cxx
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install > qout 2>&1
            make -s distclean >> qout 2>&1
        - name: Install HDF5
          if: ${{ success() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install HDF5 on ${GITHUB_WORKSPACE}/HDF5"
            rm -rf HDF5
            mkdir HDF5
            cd HDF5
            wget -cq https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION_MAJOR}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz
            tar -zxf hdf5-${HDF5_VERSION}.tar.gz
            cd hdf5-${HDF5_VERSION}
            ./configure --prefix=${GITHUB_WORKSPACE}/HDF5 \
                        --silent \
                        --enable-hl \
                        --enable-parallel \
                        --enable-build-mode=production \
                        --disable-doxygen-doc \
                        --disable-doxygen-man \
                        --disable-doxygen-html \
                        --disable-hltools \
                        --disable-tools \
                        --disable-tests \
                        CC=mpicc
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install > qout 2>&1
            make -s distclean >> qout 2>&1
        - name: Install NetCDF-C
          if: ${{ success() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install NetCDF-C on ${GITHUB_WORKSPACE}/NetCDF"
            rm -rf NetCDF
            mkdir NetCDF
            cd NetCDF
            wget -cq https://github.com/Unidata/netcdf-c/archive/refs/tags/v${NETCDF4_VERSION}.tar.gz
            tar -zxf v${NETCDF4_VERSION}.tar.gz
            cd netcdf-c-${NETCDF4_VERSION}
            # TODO: Always use an official release. E3SM-IO requires NetCDF-C 4.9.0 or later.
            # rm -rf netcdf-c
            # git clone -q https://github.com/Unidata/netcdf-c.git
            # cd netcdf-c
            # autoreconf -i
            ./configure --prefix=${GITHUB_WORKSPACE}/NetCDF \
                        --silent \
                        --disable-dap \
                        --disable-nczarr \
                        --disable-nczarr-filters \
                        --disable-filter-testing \
                        CC=mpicc \
                        CPPFLAGS="-I${GITHUB_WORKSPACE}/HDF5/include" \
                        LDFLAGS="-L${GITHUB_WORKSPACE}/HDF5/lib" \
                        LIBS="-lhdf5"
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install > qout 2>&1
            make -s distclean >> qout 2>&1
        - name: Install ADIOS2
          if: ${{ success() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install ADIOS2 on ${GITHUB_WORKSPACE}/ADIOS"
            rm -rf ADIOS
            mkdir ADIOS
            cd ADIOS
            wget -cq https://github.com/ornladios/ADIOS2/archive/refs/tags/v${ADIOS_VERSION}.tar.gz
            tar -zxf v${ADIOS_VERSION}.tar.gz
            mkdir adios2_build
            cd adios2_build
            cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/ADIOS \
                  -DADIOS2_USE_MPI=ON \
                  -DADIOS2_USE_Fortran=OFF \
                  -DADIOS2_USE_Python=OFF \
                  -DADIOS2_USE_ZeroMQ=OFF \
                  -DADIOS2_USE_HDF5=OFF \
                  -DADIOS2_USE_IME=OFF \
                  -DADIOS2_USE_BZip2=OFF \
                  -DADIOS2_USE_ZFP=OFF \
                  -DADIOS2_USE_SZ=OFF \
                  -DADIOS2_USE_MGARD=OFF \
                  -DADIOS2_USE_PNG=OFF \
                  -DADIOS2_USE_Blosc=OFF \
                  -DADIOS2_BUILD_EXAMPLES=OFF \
                  -DBUILD_TESTING=OFF \
                  -DBUILD_SHARED_LIBS=OFF \
                  -DADIOS2_USE_SST=ON \
                  -DADIOS2_USE_BP5=ON \
                  ../ADIOS2-${ADIOS_VERSION}
            make -j 8 install > qout 2>&1
            make clean >> qout 2>&1
        - name: Install log VOL
          if: ${{ success() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            echo "Install Log VOL connector on ${GITHUB_WORKSPACE}/LOGVOL"
            rm -rf LOGVOL
            mkdir LOGVOL
            cd LOGVOL
            wget -cq https://github.com/DataLib-ECP/vol-log-based/archive/refs/tags/logvol.${LOG_VOL_VERSION}.tar.gz
            tar -zxf logvol.${LOG_VOL_VERSION}.tar.gz
            cd vol-log-based-logvol.${LOG_VOL_VERSION}
            autoreconf -i
            ./configure --prefix=${GITHUB_WORKSPACE}/LOGVOL \
                        --silent \
                        --with-hdf5=${GITHUB_WORKSPACE}/HDF5
            make -s LIBTOOLFLAGS=--silent V=1 -j 8 install > qout 2>&1
            make -s distclean >> qout 2>&1
        - name: Build and check E3SM_IO with PnetCDF only
          if: ${{ success() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            rm -rf ./test_output
            autoreconf -i
            ./configure --with-pnetcdf=${GITHUB_WORKSPACE}/PnetCDF \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 8
            make check
        - name: Dump log files if E3SM_IO with PnetCDF-only test failed
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat test.sh.log utils/*.log
        - name: Build and check E3SM_IO with HDF5 only
          if: ${{ success() }}
          run: |
            make -s distclean
            ./configure --with-hdf5=${GITHUB_WORKSPACE}/HDF5 \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 8
            make check
        - name: Dump log files if E3SM_IO with HDF5-only test failed
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat test.sh.log utils/*.log
        - name: Build and check E3SM_IO with HDF5 Log VOL connector only
          if: ${{ success() }}
          run: |
            make -s distclean
            ./configure --with-hdf5=${GITHUB_WORKSPACE}/HDF5 \
                        --with-logvol=${GITHUB_WORKSPACE}/LOGVOL \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 8
            make check
        - name: Dump log files if E3SM_IO with HDF5 Log VOL connector test failed
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat test.sh.log utils/*.log
        - name: Build and check E3SM_IO with NetCDF4 only
          if: ${{ success() }}
          run: |
            make -s distclean
            ./configure --with-netcdf4=${GITHUB_WORKSPACE}/NetCDF \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 8
            make check
        - name: Dump log files if E3SM_IO with NetCDF4-only test failed
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat test.sh.log utils/*.log
        - name: Build and check E3SM_IO with ADIOS only
          if: ${{ success() }}
          run: |
            make -s distclean
            ./configure --with-adios2=${GITHUB_WORKSPACE}/ADIOS \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments
            make -j 8
            make check
        - name: Dump log files if E3SM_IO with ADIOS-only test failed
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat test.sh.log utils/*.log
        - name: Build and check E3SM_IO with all APIs
          if: ${{ success() }}
          run: |
            make -s distclean
            ./configure --with-pnetcdf=${GITHUB_WORKSPACE}/PnetCDF \
                        --with-hdf5=${GITHUB_WORKSPACE}/HDF5       \
                        --with-netcdf4=${GITHUB_WORKSPACE}/NetCDF  \
                        --with-logvol=${GITHUB_WORKSPACE}/LOGVOL   \
                        --with-adios2=${GITHUB_WORKSPACE}/ADIOS    \
                        CC=mpicc CXX=mpicxx \
                        CFLAGS=-fno-var-tracking-assignments \
                        CXXFLAGS=-fno-var-tracking-assignments \
                        TESTMPIRUN="mpiexec --oversubscribe"
            make -j 8
            make check
        - name: Dump log files if E3SM_IO test failed
          if: ${{ failure() }}
          run: |
            cd ${GITHUB_WORKSPACE}
            cat test.sh.log utils/*.log
            cat config.log
            ls -r ./test_output
        - name: Test E3SM_IO all APIs -- parallel runs
          if: ${{ success() }}
          run: |
            make ptest
        - name: Test make distcheck
          if: ${{ success() }}
          run: |
            make distcheck DISTCHECK_CONFIGURE_FLAGS="--with-pnetcdf=${GITHUB_WORKSPACE}/PnetCDF --with-hdf5=${GITHUB_WORKSPACE}/HDF5 --with-netcdf4=${GITHUB_WORKSPACE}/NetCDF --with-logvol=${GITHUB_WORKSPACE}/LOGVOL --with-adios2=${GITHUB_WORKSPACE}/ADIOS CC=mpicc CXX=mpicxx CFLAGS=-fno-var-tracking-assignments CXXFLAGS=-fno-var-tracking-assignments"
            make distclean

